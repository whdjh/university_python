#문제. 위 세 개의 중위 표현식에 대해 infix_to_postfix() 함수를 이용하여 후위 표현식으로 변환되는 과정을 설명하라.

#설명을 시작하기전 시작하기전 (는 스택에 푸쉬하는 기능이 있다고 계속 생각하도록하자.

#1)

#(A + B)에서 A가 postfix_list에 A가 추가되고 +연산자가 op스택에 저장되고 B가 postfix_list에 추가된다. 그러고 *연산자에서 이 연산자가 op스택에 저장되고 +가 pop되어 postfix_list에 추가된다. 따라서 A B +가 리스트에 추가되었다.
#그다음 C가 postfix_list에 추가되고 +가 op스택에 저장되고 D가 postfix_list에 추가되며 그다음 *이 op스택에 들어오고 +가 pop되어 postfix_list에 추가하고 *도 함께 op스택에서 pop되어 추가된다 따라서 A B + C D + *이 리스트에 추가되었다.
#이제 2와 동일한 방식으로 E F + * 가 리스트에 추가된다. 따라서 리스트는 A B + C D + * E F + * 이다.

#2)

#A + 에서 일단 +가 op스택에 저장되고 리스트에 A가 추가된다.
#((에서 B가 리스트에 추가되고 +가 op스택에 저장된다. 그러고 C가 리스트에 추가되고 그다음 닫는 괄호를 만나 +가 리스트에 추가된다.
#그러고 D가 리스트에 추가되고 +가 op스택에 저장되고 E가 리스트에 추가되고 +가 추가되고 마지막 닫는 괄호를 만나고 저장되어있던 +가 스택에서 최종적으로 빠져나오게 된다. 따라서 리스트는 A B C + D E + * + 이다.

#3)

#A가 리스트에 추가되고 *(1번별)가 op스택에 저장된다. 그러고 B가 리스트에 추가되고 *(1번별)은 *(2번별)을 만나 *(1번별) op스택에서 빠져나와 리스트에 추가되고 *(2번별)은 스택에 추가된다. 리스트에는 A B *
#C가 리스트에 추가되고 다시 *(3번별)을 만나 *(2번별)은 스택에서 나와 리스트에 추가되고 *(3번별)은 스택에 추가된다. 따라서 리스트에는 A B * C *
#D가 리스트에 추가되고 +(1번)를 만나 *이 스택에서 나오고 리스트에 추가되고 +(1번)는 스택에 추가된다. 따라서 리스트에는 A B * C * D *
#E는 리스트에 추가되고 +(1번)은 +(2번)을 만나 +(1번)이 스택에서 나오고 리스트에 추가되고 +(2번)은 스택에 추가되고 F를 리스트에 추가되고 연산이 끝나 +(2번)이 스택에서 나오고 리스트에 추가해서 연산이 끝나게 된다. 따라서 리스트는 A B * C * D * E + F +